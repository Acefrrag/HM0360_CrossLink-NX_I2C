library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity HM0360_top_level is
port(
CLK: in std_logic;
R_W_button_n: in std_logic;
start_button_n: in std_logic;
SDA: inout std_logic;
SCL: inout std_logic;
RD_content1_LED: out std_logic;
RD_content2_LED: out std_logic;
RD_content3_LED: out std_logic;
RD_content4_LED: out std_logic;
RD_content5_LED: out std_logic;
RD_content6_LED: out std_logic;
RD_content7_LED: out std_logic;
RD_content8_LED: out std_logic;
RW_LED: out std_logic
);
end HM0360_top_level;

Architecture Behavioral of HM0360_top_level is

--Parameters
constant system_clock_F: natural := 27_000_000;
constant Two_Wire_F: natural := 100_000;
constant slave_ID: std_logic_vector( 6 downto 0) := std_logic_vector(to_unsigned(16#24#, 7));
constant stable_time: integer := 10;
--Constants
constant addr_PMU_CFG3: std_logic_vector(15 downto 0) := std_logic_vector(to_unsigned(16#0324#,16));
constant data_write: std_logic_vector(7 downto 0) := std_logic_vector(to_unsigned(16#11#,8));
--Signals
signal data_read: std_logic_vector(7 downto 0) := (others => '0');
signal R_W: std_logic := '0';
signal start: std_logic;
signal finished: std_logic;
signal error: std_logic;
signal R_W_button_deb, start_button_deb: std_logic:='0';
signal start_button		: std_logic;
signal R_W_button		: std_logic;


component HM0360_serial_master is
generic(
	constant system_clock_F : natural;
	constant Two_Wire_F: natural;
	constant slave_ID: std_logic_vector(6 downto 0)
);
port(
	reset_n		: in std_logic;
	CLK		: in std_logic;
	SDA		: inout std_logic;
	SCL		: inout std_logic;
	addr		: in std_logic_vector(15 downto 0);
	R_W		: in std_logic;
	data_write	: in std_logic_vector(7 downto 0);
	data_read	: out std_logic_vector(7 downto 0);
	start		: in std_logic;
	finished	: out std_logic;
	error		: out std_logic
);
end component;

component debounce is
  generic(
    clk_freq    : INTEGER := 27_000_000;  --system clock frequency in Hz
    stable_time : INTEGER := 10);         --time button must remain stable in ms
  port(
    clk     : in  STD_LOGIC;  --input clock
    reset_n : in  STD_LOGIC;  --asynchronous active low reset
    button  : in  STD_LOGIC;  --input signal to be debounced
    button_deb  : out STD_LOGIC); --debounced signal
end component;

begin

R_W_button <= not(R_W_button_n);
start_button <= not(start_button_n);

HM0360_serial_master_comp: HM0360_serial_master
generic map(
system_clock_F => system_clock_F,
Two_Wire_F => Two_Wire_F,
slave_ID => slave_ID
)
port map(
reset_N => '1',
CLK	=> CLK,
SDA	=> SDA,
SCL	=> SCL,
addr => addr_PMU_CFG3,
R_W	=> R_W,
data_write => data_write,
data_read => data_read,
start => start_button_deb,
finished => finished,
error => error
);

debounce_R_W_button: debounce
generic map(
	clk_freq => system_clock_F,
	stable_time => stable_time
)
port map(
    clk => CLK,
    reset_n => '1',
    button => start_button,
    button_deb  => start_button_deb
);

debounce_start_button: debounce
generic map(
	clk_freq => system_clock_F,
	stable_time => stable_time
)
port map(
    clk => CLK,
    reset_n => '1',
    button => R_W_button,
    button_deb  => R_W_button_deb
	); --debounced signal

RW_LED <= not(R_W);
R_W_gen: process(all) is
begin
if rising_edge(R_W_button_deb) then
	R_W <= not(R_W);
end if;
end process;

RD_content1_LED <= not(data_read(0));
RD_content2_LED <= not(data_read(1));
RD_content3_LED <= not(data_read(2));
RD_content4_LED <= not(data_read(3));
RD_content5_LED <= not(data_read(4));
RD_content6_LED <= not(data_read(5));
RD_content7_LED <= not(data_read(6));
RD_content8_LED <= not(data_read(7));



end Behavioral;