library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity configuration_module is
port(
CLK			: in std_logic;
init_config		: in std_logic;
finished_reg_op		: in std_logic;
data_write		: out std_logic_vector(7 downto 0);
addr			: out std_logic_vector(15 downto 0);
start			: out std_logic
);
end configuration_module;

Architecture Behavioral of configuration_module is

type FSM_state_t is (idle_s, wait0_s, set_number_frames_s, wait1_s, select_I2C_s, wait2_s, clock_gating_s, cleanup_s);
signal pr_state, nx_state: FSM_state_t := idle_s;

begin

FSM_pr_state: process(CLK) is
begin
if rising_edge(CLK) then
	pr_state <= nx_state;
end if;
end process;

FSM_nx_state: process(all) is

begin

case pr_state is
when idle_s =>
	if init_config = '1' then
		nx_state <= wait0_s;
	end if;
when wait0_s =>
	if finished_reg_op = '0' then
		nx_state <= set_number_frames_s;
	else
		nx_state <= wait0_s;
	end if;
when set_number_frames_s =>
	if finished_reg_op = '1' then
		nx_state <= wait1_s;
	end if;
when wait1_s =>
	if finished_reg_op = '0' then
		nx_state <= select_I2C_s;
	else
		nx_state <= wait1_s;
	end if;
when select_I2C_s =>
	if finished_reg_op = '1' then
		nx_state <= wait2_s;
	end if;
when wait2_s =>
	if finished_reg_op = '0' then
		nx_state <= clock_gating_s;
	else
		nx_state <= wait2_s;
	end if;
when clock_gating_s =>
	if finished_reg_op = '1' then
		nx_state <= cleanup_s
	end if;
when cleanup_s =>
	if init_config = '1' then
		nx_state <= cleanup_s;
	else
		nx_state <= idle_s;
	end if;
end case;

end process;

FSM_output: process(all) is

begin

case pr_state is
when idle_s =>
	start <= '0';
	addr <= (others => '0');
	data_write <= (others => '0');
when wait0_s =>
	start <= '0';
	addr <= std_logic_vector(to_unsigned(16#3028#, 16));
	data_write <= std_logic_vector(to_unsigned(16#01#, 8));
when set_number_frames_s =>
	if finished_reg_op = '1' then
		start <= '0';
	else
		start <= '1';
	end if;
	addr <= std_logic_vector(to_unsigned(16#3028#, 16));
	data_write <= std_logic_vector(to_unsigned(16#01#, 8));
when wait1_s =>
	start <= '0';
	addr <= std_logic_vector(to_unsigned(16#3024#, 16));
	data_write <= std_logic_vector(to_unsigned(16#00#, 8));
when select_I2C_s =>
	if finished_reg_op = '1' then
		start <= '0';
	else
		start <= '1';
	end if;
	addr <= std_logic_vector(to_unsigned(16#3024#, 16));
	data_write <= std_logic_vector(to_unsigned(16#00#, 8));
when wait2_s =>
	start <= '0';
	addr <= std_logic_vector(to_unsigned(16#1014#, 16));
	data_write <= std_logic_vector(to_unsigned(16#07#, 8));
when clock_gating_s =>
	if finished_reg_op = '1' then
		start <= '0';
	else
		start <= '1';
	end if;
	addr <= std_logic_vector(to_unsigned(16#1014#, 16));
	data_write <= std_logic_vector(to_unsigned(16#07#, 8));
when cleanup_s =>
	start <= '0';
	addr <= (others => '0');
	data_write <= (others => '0');
end case;

end process;

end Behavioral;